// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuditWorklistTab Tests rendering Audit worklist component Renders Audit worklist with errors 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabScreen
    collapsedState={
      [
        false,
        [MockFunction],
      ]
    }
    config={
      {
        "areas": [
          {
            "area": "CENTER",
            "categories": [
              5,
              7,
              9,
              11,
              16,
            ],
          },
          {
            "area": "GM",
            "categories": [
              23,
              24,
              28,
              31,
            ],
          },
          {
            "area": "Fresh",
            "categories": [
              41,
              42,
              43,
              45,
              47,
              48,
            ],
          },
        ],
        "auditWorklists": false,
        "binning": false,
        "createPallet": false,
        "enableAreaFilter": false,
        "enableAuditSave": false,
        "enableAuditsInProgress": false,
        "inProgress": false,
        "locationManagement": false,
        "locationManagementEdit": false,
        "manualNoAction": false,
        "multiBin": false,
        "multiPick": false,
        "palletExpiration": false,
        "palletManagement": false,
        "palletWorklists": false,
        "perishableCategories": "",
        "peteGetLocations": false,
        "peteGetPallets": false,
        "picking": false,
        "printingUpdate": false,
        "reserveAdjustment": false,
        "scanRequired": false,
        "settingsTool": false,
        "showCalculator": false,
        "showFeedback": false,
        "showItemImage": false,
        "showOpenAuditLink": false,
        "showQuantityStocked": false,
        "showRollOverAudit": false,
      }
    }
    countryCode="MX"
    dispatch={[MockFunction]}
    error={[Function]}
    filterCategories={[]}
    filterExceptions={[]}
    isLoadedState={
      [
        false,
        [MockFunction],
      ]
    }
    isManualScanEnabled={true}
    items={
      [
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567890,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559999",
          "worklistType": "AU",
        },
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567899,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559934",
          "worklistType": "AU",
        },
        {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "ELECTRONIC ITEM",
          "itemNbr": 987654321,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "777555333",
          "worklistType": "AU",
        },
        {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "BAKERY ITEM",
          "itemNbr": 123789456,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "111122223333",
          "worklistType": "RA",
        },
      ]
    }
    onRefresh={[Function]}
    refreshing={false}
    tokenIsWaiting={false}
    trackEventCall={[MockFunction]}
    useEffectHook={[MockFunction]}
  />
</Context.Provider>
`;

exports[`AuditWorklistTab Tests rendering Audit worklist component Renders AuditWorkListTab component wrapper 1`] = `
<RCTScrollView
  data={[]}
  getItem={[Function]}
  getItemCount={[Function]}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onRefresh={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  refreshControl={
    <RefreshControlMock
      onRefresh={[Function]}
      refreshing={false}
    />
  }
  refreshing={false}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={[]}
  viewabilityConfigCallbackPairs={[]}
  windowSize={3}
>
  <RCTRefreshControl />
  <View />
</RCTScrollView>
`;

exports[`AuditWorklistTab Tests rendering Audit worklist component Renders completed Audit worklist items 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabScreen
    collapsedState={
      [
        false,
        [MockFunction],
      ]
    }
    config={
      {
        "areas": [
          {
            "area": "CENTER",
            "categories": [
              5,
              7,
              9,
              11,
              16,
            ],
          },
          {
            "area": "GM",
            "categories": [
              23,
              24,
              28,
              31,
            ],
          },
          {
            "area": "Fresh",
            "categories": [
              41,
              42,
              43,
              45,
              47,
              48,
            ],
          },
        ],
        "auditWorklists": false,
        "binning": false,
        "createPallet": false,
        "enableAreaFilter": false,
        "enableAuditSave": false,
        "enableAuditsInProgress": false,
        "inProgress": false,
        "locationManagement": false,
        "locationManagementEdit": false,
        "manualNoAction": false,
        "multiBin": false,
        "multiPick": false,
        "palletExpiration": false,
        "palletManagement": false,
        "palletWorklists": false,
        "perishableCategories": "",
        "peteGetLocations": false,
        "peteGetPallets": false,
        "picking": false,
        "printingUpdate": false,
        "reserveAdjustment": false,
        "scanRequired": false,
        "settingsTool": false,
        "showCalculator": false,
        "showFeedback": false,
        "showItemImage": false,
        "showOpenAuditLink": false,
        "showQuantityStocked": false,
        "showRollOverAudit": false,
      }
    }
    countryCode="MX"
    dispatch={[MockFunction]}
    error={null}
    filterCategories={[]}
    filterExceptions={[]}
    isLoadedState={
      [
        false,
        [MockFunction],
      ]
    }
    isManualScanEnabled={true}
    items={
      [
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567890,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559999",
          "worklistType": "AU",
        },
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567899,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559934",
          "worklistType": "AU",
        },
        {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "ELECTRONIC ITEM",
          "itemNbr": 987654321,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "777555333",
          "worklistType": "AU",
        },
        {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "BAKERY ITEM",
          "itemNbr": 123789456,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "111122223333",
          "worklistType": "RA",
        },
      ]
    }
    onRefresh={[Function]}
    refreshing={false}
    tokenIsWaiting={false}
    trackEventCall={[MockFunction]}
    useEffectHook={[MockFunction]}
  />
</Context.Provider>
`;

exports[`AuditWorklistTab Tests rendering Audit worklist component Renders completed Audit worklist items with images 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabScreen
    collapsedState={
      [
        false,
        [MockFunction],
      ]
    }
    config={
      {
        "areas": [
          {
            "area": "CENTER",
            "categories": [
              5,
              7,
              9,
              11,
              16,
            ],
          },
          {
            "area": "GM",
            "categories": [
              23,
              24,
              28,
              31,
            ],
          },
          {
            "area": "Fresh",
            "categories": [
              41,
              42,
              43,
              45,
              47,
              48,
            ],
          },
        ],
        "auditWorklists": false,
        "binning": false,
        "createPallet": false,
        "enableAreaFilter": false,
        "enableAuditSave": false,
        "enableAuditsInProgress": false,
        "inProgress": false,
        "locationManagement": false,
        "locationManagementEdit": false,
        "manualNoAction": false,
        "multiBin": false,
        "multiPick": false,
        "palletExpiration": false,
        "palletManagement": false,
        "palletWorklists": false,
        "perishableCategories": "",
        "peteGetLocations": false,
        "peteGetPallets": false,
        "picking": false,
        "printingUpdate": false,
        "reserveAdjustment": false,
        "scanRequired": false,
        "settingsTool": false,
        "showCalculator": false,
        "showFeedback": false,
        "showItemImage": true,
        "showOpenAuditLink": false,
        "showQuantityStocked": false,
        "showRollOverAudit": false,
      }
    }
    countryCode="MX"
    dispatch={[MockFunction]}
    error={null}
    filterCategories={[]}
    filterExceptions={[]}
    isLoadedState={
      [
        false,
        [MockFunction],
      ]
    }
    isManualScanEnabled={true}
    items={
      [
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567890,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559999",
          "worklistType": "AU",
        },
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567899,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559934",
          "worklistType": "AU",
        },
        {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "ELECTRONIC ITEM",
          "itemNbr": 987654321,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "777555333",
          "worklistType": "AU",
        },
        {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "completed": true,
          "completedTs": "2022-09-15T13:32:41+05:30",
          "completedUserId": "vn51wu8",
          "itemName": "BAKERY ITEM",
          "itemNbr": 123789456,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "111122223333",
          "worklistType": "RA",
        },
      ]
    }
    onRefresh={[Function]}
    refreshing={false}
    tokenIsWaiting={false}
    trackEventCall={[MockFunction]}
    useEffectHook={[MockFunction]}
  />
</Context.Provider>
`;

exports[`AuditWorklistTab Tests rendering Audit worklist component Renders to-do Audit worklist items 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabScreen
    collapsedState={
      [
        false,
        [MockFunction],
      ]
    }
    config={
      {
        "areas": [
          {
            "area": "CENTER",
            "categories": [
              5,
              7,
              9,
              11,
              16,
            ],
          },
          {
            "area": "GM",
            "categories": [
              23,
              24,
              28,
              31,
            ],
          },
          {
            "area": "Fresh",
            "categories": [
              41,
              42,
              43,
              45,
              47,
              48,
            ],
          },
        ],
        "auditWorklists": false,
        "binning": false,
        "createPallet": false,
        "enableAreaFilter": false,
        "enableAuditSave": false,
        "enableAuditsInProgress": false,
        "inProgress": false,
        "locationManagement": false,
        "locationManagementEdit": false,
        "manualNoAction": false,
        "multiBin": false,
        "multiPick": false,
        "palletExpiration": false,
        "palletManagement": false,
        "palletWorklists": false,
        "perishableCategories": "",
        "peteGetLocations": false,
        "peteGetPallets": false,
        "picking": false,
        "printingUpdate": false,
        "reserveAdjustment": false,
        "scanRequired": false,
        "settingsTool": false,
        "showCalculator": false,
        "showFeedback": false,
        "showItemImage": false,
        "showOpenAuditLink": false,
        "showQuantityStocked": false,
        "showRollOverAudit": false,
      }
    }
    countryCode="MX"
    dispatch={[MockFunction]}
    error={null}
    filterCategories={[]}
    filterExceptions={[]}
    isLoadedState={
      [
        false,
        [MockFunction],
      ]
    }
    isManualScanEnabled={true}
    items={
      [
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567890,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559999",
          "worklistType": "AU",
        },
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567899,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559934",
          "worklistType": "AU",
        },
        {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "ELECTRONIC ITEM",
          "itemNbr": 987654321,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "777555333",
          "worklistType": "AU",
        },
        {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "BAKERY ITEM",
          "itemNbr": 123789456,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "111122223333",
          "worklistType": "RA",
        },
      ]
    }
    onRefresh={[Function]}
    refreshing={false}
    tokenIsWaiting={false}
    trackEventCall={[MockFunction]}
    useEffectHook={[MockFunction]}
  />
</Context.Provider>
`;

exports[`AuditWorklistTab Tests rendering AuditWorklistTab component with collapsible prop Renders the worklist items in collapsible mode when collapse button clicked 1`] = `
[
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#ffffffff",
        "flexDirection": "row",
        "marginBottom": 8,
        "paddingRight": 16,
      }
    }
  >
    <TextInput
      autoFocus={true}
      keyboardType="numeric"
      onChangeText={[Function]}
      onSubmitEditing={[Function]}
      placeholder="[missing "en.GENERICS.ENTER_UPC_ITEM_NBR" translation]"
      selectionColor="#0071e9"
      style={
        {
          "color": "#000000",
          "flex": 1,
          "paddingLeft": 10,
        }
      }
      testID="txtEntry"
      value=""
    />
  </View>,
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#ffffffff",
        "flexDirection": "row",
        "paddingHorizontal": 10,
        "paddingVertical": 5,
        "width": "100%",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
      testID="collapse-text-btn"
    >
      <Text
        style={
          {
            "color": "#5a9ae0",
            "fontSize": 12,
          }
        }
      >
        [missing "en.AUDITS.COLLAPSE_ALL" translation]
      </Text>
    </View>
  </View>,
  <RCTScrollView
    data={
      [
        "93 - FOODSERVICE",
        "99 - ELECTRONICS",
        "88 - FRESH BAKERY",
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
    windowSize={3}
  >
    <RCTRefreshControl />
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                93 - FOODSERVICE
              </Text>
              <Text>
                2 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-up"
                size={25}
              />
            </View>
          </View>
          <View
            data={
              [
                {
                  "catgName": "FOODSERVICE",
                  "catgNbr": 93,
                  "completed": false,
                  "completedTs": undefined,
                  "completedUserId": undefined,
                  "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
                  "itemNbr": 1234567890,
                  "subCatgName": undefined,
                  "subCatgNbr": 0,
                  "upcNbr": "000055559999",
                  "worklistType": "AU",
                },
                {
                  "catgName": "FOODSERVICE",
                  "catgNbr": 93,
                  "completed": false,
                  "completedTs": undefined,
                  "completedUserId": undefined,
                  "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
                  "itemNbr": 1234567899,
                  "subCatgName": undefined,
                  "subCatgNbr": 0,
                  "upcNbr": "000055559934",
                  "worklistType": "AU",
                },
              ]
            }
            getItem={[Function]}
            getItemCount={[Function]}
            getItemLayout={[Function]}
            keyExtractor={[Function]}
            onContentSizeChange={[Function]}
            onLayout={[Function]}
            onMomentumScrollBegin={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={[]}
            viewabilityConfigCallbackPairs={[]}
          >
            <View
              onFocusCapture={[Function]}
              style={null}
            >
              <View
                accessibilityState={
                  {
                    "busy": undefined,
                    "checked": undefined,
                    "disabled": undefined,
                    "expanded": undefined,
                    "selected": undefined,
                  }
                }
                accessibilityValue={
                  {
                    "max": undefined,
                    "min": undefined,
                    "now": undefined,
                    "text": undefined,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={false}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  {
                    "alignItems": "center",
                    "backgroundColor": "#ffffffff",
                    "flexDirection": "row",
                    "height": 100,
                    "justifyContent": "flex-start",
                    "marginBottom": 2,
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    {
                      "alignItems": "flex-start",
                      "flex": 1,
                      "justifyContent": "space-evenly",
                    }
                  }
                >
                  <View
                    style={
                      {
                        "marginTop": 2,
                        "width": "100%",
                      }
                    }
                  >
                    <View
                      accessibilityState={
                        {
                          "busy": undefined,
                          "checked": undefined,
                          "disabled": false,
                          "expanded": undefined,
                          "selected": undefined,
                        }
                      }
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={true}
                      collapsable={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        {
                          "backgroundColor": "#ffffffff",
                          "flexDirection": "row",
                          "opacity": 1,
                          "padding": 5,
                          "paddingLeft": 10,
                          "width": "100%",
                        }
                      }
                      testID="itemCard"
                    >
                      <View
                        style={
                          {
                            "flexDirection": "column",
                            "flexShrink": 1,
                            "justifyContent": "space-around",
                            "padding": 5,
                          }
                        }
                        testID="item-details"
                      >
                        <View
                          style={
                            {
                              "paddingBottom": 10,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#616161",
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 12,
                              }
                            }
                          >
                            [missing "en.GENERICS.ITEM" translation] 1234567890
                          </Text>
                        </View>
                        <View>
                          <Text
                            style={
                              {
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 14,
                                "marginVertical": 2,
                              }
                            }
                          >
                            Nature Valley Sweet And Salty Nuts Granola Bars
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
            <View
              onFocusCapture={[Function]}
              style={null}
            >
              <View
                accessibilityState={
                  {
                    "busy": undefined,
                    "checked": undefined,
                    "disabled": undefined,
                    "expanded": undefined,
                    "selected": undefined,
                  }
                }
                accessibilityValue={
                  {
                    "max": undefined,
                    "min": undefined,
                    "now": undefined,
                    "text": undefined,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={false}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  {
                    "alignItems": "center",
                    "backgroundColor": "#ffffffff",
                    "flexDirection": "row",
                    "height": 100,
                    "justifyContent": "flex-start",
                    "marginBottom": 2,
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    {
                      "alignItems": "flex-start",
                      "flex": 1,
                      "justifyContent": "space-evenly",
                    }
                  }
                >
                  <View
                    style={
                      {
                        "marginTop": 2,
                        "width": "100%",
                      }
                    }
                  >
                    <View
                      accessibilityState={
                        {
                          "busy": undefined,
                          "checked": undefined,
                          "disabled": false,
                          "expanded": undefined,
                          "selected": undefined,
                        }
                      }
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={true}
                      collapsable={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        {
                          "backgroundColor": "#ffffffff",
                          "flexDirection": "row",
                          "opacity": 1,
                          "padding": 5,
                          "paddingLeft": 10,
                          "width": "100%",
                        }
                      }
                      testID="itemCard"
                    >
                      <View
                        style={
                          {
                            "flexDirection": "column",
                            "flexShrink": 1,
                            "justifyContent": "space-around",
                            "padding": 5,
                          }
                        }
                        testID="item-details"
                      >
                        <View
                          style={
                            {
                              "paddingBottom": 10,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#616161",
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 12,
                              }
                            }
                          >
                            [missing "en.GENERICS.ITEM" translation] 1234567899
                          </Text>
                        </View>
                        <View>
                          <Text
                            style={
                              {
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 14,
                                "marginVertical": 2,
                              }
                            }
                          >
                            Nature Valley Sweet And Salty Nuts Granola Bars
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                99 - ELECTRONICS
              </Text>
              <Text>
                1 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-up"
                size={25}
              />
            </View>
          </View>
          <View
            data={
              [
                {
                  "catgName": "ELECTRONICS",
                  "catgNbr": 99,
                  "completed": false,
                  "completedTs": undefined,
                  "completedUserId": undefined,
                  "itemName": "ELECTRONIC ITEM",
                  "itemNbr": 987654321,
                  "subCatgName": undefined,
                  "subCatgNbr": 0,
                  "upcNbr": "777555333",
                  "worklistType": "AU",
                },
              ]
            }
            getItem={[Function]}
            getItemCount={[Function]}
            getItemLayout={[Function]}
            keyExtractor={[Function]}
            onContentSizeChange={[Function]}
            onLayout={[Function]}
            onMomentumScrollBegin={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={[]}
            viewabilityConfigCallbackPairs={[]}
          >
            <View
              onFocusCapture={[Function]}
              style={null}
            >
              <View
                accessibilityState={
                  {
                    "busy": undefined,
                    "checked": undefined,
                    "disabled": undefined,
                    "expanded": undefined,
                    "selected": undefined,
                  }
                }
                accessibilityValue={
                  {
                    "max": undefined,
                    "min": undefined,
                    "now": undefined,
                    "text": undefined,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={false}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  {
                    "alignItems": "center",
                    "backgroundColor": "#ffffffff",
                    "flexDirection": "row",
                    "height": 100,
                    "justifyContent": "flex-start",
                    "marginBottom": 2,
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    {
                      "alignItems": "flex-start",
                      "flex": 1,
                      "justifyContent": "space-evenly",
                    }
                  }
                >
                  <View
                    style={
                      {
                        "marginTop": 2,
                        "width": "100%",
                      }
                    }
                  >
                    <View
                      accessibilityState={
                        {
                          "busy": undefined,
                          "checked": undefined,
                          "disabled": false,
                          "expanded": undefined,
                          "selected": undefined,
                        }
                      }
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={true}
                      collapsable={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        {
                          "backgroundColor": "#ffffffff",
                          "flexDirection": "row",
                          "opacity": 1,
                          "padding": 5,
                          "paddingLeft": 10,
                          "width": "100%",
                        }
                      }
                      testID="itemCard"
                    >
                      <View
                        style={
                          {
                            "flexDirection": "column",
                            "flexShrink": 1,
                            "justifyContent": "space-around",
                            "padding": 5,
                          }
                        }
                        testID="item-details"
                      >
                        <View
                          style={
                            {
                              "paddingBottom": 10,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#616161",
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 12,
                              }
                            }
                          >
                            [missing "en.GENERICS.ITEM" translation] 987654321
                          </Text>
                        </View>
                        <View>
                          <Text
                            style={
                              {
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 14,
                                "marginVertical": 2,
                              }
                            }
                          >
                            ELECTRONIC ITEM
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                88 - FRESH BAKERY
              </Text>
              <Text>
                1 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-up"
                size={25}
              />
            </View>
          </View>
          <View
            data={
              [
                {
                  "catgName": "FRESH BAKERY",
                  "catgNbr": 88,
                  "completed": false,
                  "completedTs": undefined,
                  "completedUserId": undefined,
                  "itemName": "BAKERY ITEM",
                  "itemNbr": 123789456,
                  "subCatgName": undefined,
                  "subCatgNbr": 0,
                  "upcNbr": "111122223333",
                  "worklistType": "RA",
                },
              ]
            }
            getItem={[Function]}
            getItemCount={[Function]}
            getItemLayout={[Function]}
            keyExtractor={[Function]}
            onContentSizeChange={[Function]}
            onLayout={[Function]}
            onMomentumScrollBegin={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={[]}
            viewabilityConfigCallbackPairs={[]}
          >
            <View
              onFocusCapture={[Function]}
              style={null}
            >
              <View
                accessibilityState={
                  {
                    "busy": undefined,
                    "checked": undefined,
                    "disabled": undefined,
                    "expanded": undefined,
                    "selected": undefined,
                  }
                }
                accessibilityValue={
                  {
                    "max": undefined,
                    "min": undefined,
                    "now": undefined,
                    "text": undefined,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={false}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  {
                    "alignItems": "center",
                    "backgroundColor": "#ffffffff",
                    "flexDirection": "row",
                    "height": 100,
                    "justifyContent": "flex-start",
                    "marginBottom": 2,
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    {
                      "alignItems": "flex-start",
                      "flex": 1,
                      "justifyContent": "space-evenly",
                    }
                  }
                >
                  <View
                    style={
                      {
                        "marginTop": 2,
                        "width": "100%",
                      }
                    }
                  >
                    <View
                      accessibilityState={
                        {
                          "busy": undefined,
                          "checked": undefined,
                          "disabled": false,
                          "expanded": undefined,
                          "selected": undefined,
                        }
                      }
                      accessibilityValue={
                        {
                          "max": undefined,
                          "min": undefined,
                          "now": undefined,
                          "text": undefined,
                        }
                      }
                      accessible={true}
                      collapsable={false}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        {
                          "backgroundColor": "#ffffffff",
                          "flexDirection": "row",
                          "opacity": 1,
                          "padding": 5,
                          "paddingLeft": 10,
                          "width": "100%",
                        }
                      }
                      testID="itemCard"
                    >
                      <View
                        style={
                          {
                            "flexDirection": "column",
                            "flexShrink": 1,
                            "justifyContent": "space-around",
                            "padding": 5,
                          }
                        }
                        testID="item-details"
                      >
                        <View
                          style={
                            {
                              "paddingBottom": 10,
                            }
                          }
                        >
                          <Text
                            style={
                              {
                                "color": "#616161",
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 12,
                              }
                            }
                          >
                            [missing "en.GENERICS.ITEM" translation] 123789456
                          </Text>
                        </View>
                        <View>
                          <Text
                            style={
                              {
                                "flexShrink": 1,
                                "flexWrap": "wrap",
                                "fontSize": 14,
                                "marginVertical": 2,
                              }
                            }
                          >
                            BAKERY ITEM
                          </Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>,
]
`;

exports[`AuditWorklistTab Tests rendering AuditWorklistTab component with collapsible prop Renders the worklist items in open mode when expand button clicked 1`] = `
[
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#ffffffff",
        "flexDirection": "row",
        "marginBottom": 8,
        "paddingRight": 16,
      }
    }
  >
    <TextInput
      autoFocus={true}
      keyboardType="numeric"
      onChangeText={[Function]}
      onSubmitEditing={[Function]}
      placeholder="[missing "en.GENERICS.ENTER_UPC_ITEM_NBR" translation]"
      selectionColor="#0071e9"
      style={
        {
          "color": "#000000",
          "flex": 1,
          "paddingLeft": 10,
        }
      }
      testID="txtEntry"
      value=""
    />
  </View>,
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#ffffffff",
        "flexDirection": "row",
        "paddingHorizontal": 10,
        "paddingVertical": 5,
        "width": "100%",
      }
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
      testID="collapse-text-btn"
    >
      <Text
        style={
          {
            "color": "#5a9ae0",
            "fontSize": 12,
          }
        }
      >
        [missing "en.AUDITS.EXPAND_ALL" translation]
      </Text>
    </View>
  </View>,
  <RCTScrollView
    data={
      [
        "93 - FOODSERVICE",
        "99 - ELECTRONICS",
        "88 - FRESH BAKERY",
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
    windowSize={3}
  >
    <RCTRefreshControl />
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                93 - FOODSERVICE
              </Text>
              <Text>
                2 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-down"
                size={25}
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                99 - ELECTRONICS
              </Text>
              <Text>
                1 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-down"
                size={25}
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "#ffffffff",
                "borderBottomWidth": 1,
                "borderColor": "#616161",
                "flexDirection": "row",
                "height": 50,
                "paddingHorizontal": 15,
                "paddingVertical": 10,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text>
                88 - FRESH BAKERY
              </Text>
              <Text>
                1 [missing "en.AUDITS.CUSTOM_ITEMS" translation]
              </Text>
            </View>
            <View
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              hitSlop={
                {
                  "bottom": 10,
                  "left": 15,
                  "right": 15,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "opacity": 1,
                }
              }
              testID="collapsible-card"
            >
              <Icon
                color="#0071e9"
                name="keyboard-arrow-down"
                size={25}
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>,
]
`;

exports[`AuditWorklistTab Tests rendering AuditWorklistTab component with collapsible prop Renders to-do Audit worklist items without manual scan enabled 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabScreen
    collapsedState={
      [
        false,
        [MockFunction],
      ]
    }
    config={
      {
        "areas": [
          {
            "area": "CENTER",
            "categories": [
              5,
              7,
              9,
              11,
              16,
            ],
          },
          {
            "area": "GM",
            "categories": [
              23,
              24,
              28,
              31,
            ],
          },
          {
            "area": "Fresh",
            "categories": [
              41,
              42,
              43,
              45,
              47,
              48,
            ],
          },
        ],
        "auditWorklists": false,
        "binning": false,
        "createPallet": false,
        "enableAreaFilter": false,
        "enableAuditSave": false,
        "enableAuditsInProgress": false,
        "inProgress": false,
        "locationManagement": false,
        "locationManagementEdit": false,
        "manualNoAction": false,
        "multiBin": false,
        "multiPick": false,
        "palletExpiration": false,
        "palletManagement": false,
        "palletWorklists": false,
        "perishableCategories": "",
        "peteGetLocations": false,
        "peteGetPallets": false,
        "picking": false,
        "printingUpdate": false,
        "reserveAdjustment": false,
        "scanRequired": false,
        "settingsTool": false,
        "showCalculator": false,
        "showFeedback": false,
        "showItemImage": false,
        "showOpenAuditLink": false,
        "showQuantityStocked": false,
        "showRollOverAudit": false,
      }
    }
    countryCode="MX"
    dispatch={[MockFunction]}
    error={null}
    filterCategories={[]}
    filterExceptions={[]}
    isLoadedState={
      [
        false,
        [MockFunction],
      ]
    }
    isManualScanEnabled={false}
    items={
      [
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567890,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559999",
          "worklistType": "AU",
        },
        {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "Nature Valley Sweet And Salty Nuts Granola Bars",
          "itemNbr": 1234567899,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "000055559934",
          "worklistType": "AU",
        },
        {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "ELECTRONIC ITEM",
          "itemNbr": 987654321,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "777555333",
          "worklistType": "AU",
        },
        {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "completed": false,
          "completedTs": undefined,
          "completedUserId": undefined,
          "itemName": "BAKERY ITEM",
          "itemNbr": 123789456,
          "subCatgName": undefined,
          "subCatgNbr": 0,
          "upcNbr": "111122223333",
          "worklistType": "RA",
        },
      ]
    }
    onRefresh={[Function]}
    refreshing={false}
    tokenIsWaiting={false}
    trackEventCall={[MockFunction]}
    useEffectHook={[MockFunction]}
  />
</Context.Provider>
`;

exports[`Tests rendering Filter \`Pills\` Renders a filter button for list filter type AREA 1`] = `
<View
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#0071e9",
      "borderRadius": 20,
      "flexDirection": "row",
      "height": 30,
      "justifyContent": "center",
      "marginHorizontal": 5,
      "marginVertical": 10,
      "paddingHorizontal": 5,
    }
  }
>
  <Text
    style={
      {
        "color": "#ffffffff",
        "paddingHorizontal": 10,
      }
    }
  >
    ELECTRONICS
  </Text>
  <TouchableOpacity
    onPress={[Function]}
    testID="button"
  >
    <mockMaterialCommunityIcons
      color="#ffffffff"
      name="close-circle"
      size={20}
    />
  </TouchableOpacity>
</View>
`;

exports[`Tests rendering Filter \`Pills\` Renders a filter button for list filter type CATEGORY  1`] = `
<View
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#0071e9",
      "borderRadius": 20,
      "flexDirection": "row",
      "height": 30,
      "justifyContent": "center",
      "marginHorizontal": 5,
      "marginVertical": 10,
      "paddingHorizontal": 5,
    }
  }
>
  <Text
    style={
      {
        "color": "#ffffffff",
        "paddingHorizontal": 10,
      }
    }
  >
    99 - ELECTRONICS
  </Text>
  <TouchableOpacity
    onPress={[Function]}
    testID="button"
  >
    <mockMaterialCommunityIcons
      color="#ffffffff"
      name="close-circle"
      size={20}
    />
  </TouchableOpacity>
</View>
`;

exports[`Tests rendering Filter \`Pills\` Renders a filter button for list filter type EXCEPTION 1`] = `
<View
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#0071e9",
      "borderRadius": 20,
      "flexDirection": "row",
      "height": 30,
      "justifyContent": "center",
      "marginHorizontal": 5,
      "marginVertical": 10,
      "paddingHorizontal": 5,
    }
  }
>
  <Text
    style={
      {
        "color": "#ffffffff",
        "paddingHorizontal": 10,
      }
    }
  >
    [missing "en.EXCEPTION.ROLLOVER_AUDITS" translation]
  </Text>
  <TouchableOpacity
    onPress={[Function]}
    testID="button"
  >
    <mockMaterialCommunityIcons
      color="#ffffffff"
      name="close-circle"
      size={20}
    />
  </TouchableOpacity>
</View>
`;

exports[`Tests rendering Filter \`Pills\` Renders empty view element for invalid list filter type 1`] = `<View />`;

exports[`Tests rendering Filter \`Pills\` Renders empty view element for non-existing EXCEPTION value 1`] = `<View />`;
