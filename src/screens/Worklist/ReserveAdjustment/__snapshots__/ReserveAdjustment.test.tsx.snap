// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReserveAdjustmentScreen Snapshot test for update pallet qty modal 1`] = `
<Modal
  animationType="none"
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  transparent={true}
  visible={true}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#00000099",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#ffffffff",
            "borderRadius": 7.5,
            "justifyContent": "center",
            "paddingBottom": 12,
            "paddingHorizontal": 8,
            "width": "80%",
          },
          Object {
            "minHeight": undefined,
          },
        ]
      }
    >
      <Modal
        animationType="none"
        hardwareAccelerated={false}
        onRequestClose={[Function]}
        transparent={true}
        visible={false}
      />
      <View>
        <Text
          style={
            Object {
              "fontSize": 18,
              "paddingVertical": 8,
              "textAlign": "center",
            }
          }
        >
          [missing "en.AUDITS.PALLET_COUNT" translation] 4988
        </Text>
      </View>
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderRadius": 10,
              "borderWidth": 1,
              "flexDirection": "row",
            },
            Object {
              "borderColor": "#e0e0e0",
            },
          ]
        }
        testID="numericSelector"
      >
        <View
          style={
            Array [
              Object {
                "height": 15,
                "width": 35,
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              accessibilityState={
                Object {
                  "disabled": true,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#00000000",
                  "flex": 1,
                  "justifyContent": "center",
                  "opacity": 1,
                }
              }
              testID="decreaseButton"
            >
              <mockMaterialCommunityIcons
                color="#BABBBE"
                name="minus"
                size={18}
              />
            </View>
          </View>
        </View>
        <TextInput
          keyboardType="numeric"
          onChangeText={[Function]}
          onEndEditing={[Function]}
          style={
            Object {
              "color": "#0071e9",
              "height": 40,
              "minWidth": "15%",
              "textAlign": "center",
            }
          }
          testID="numericTextInput"
          value="0"
        />
        <View
          style={
            Array [
              Object {
                "height": 15,
                "width": 35,
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              accessibilityState={
                Object {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#00000000",
                  "flex": 1,
                  "justifyContent": "center",
                  "opacity": 1,
                }
              }
              testID="increaseButton"
            >
              <mockMaterialCommunityIcons
                color="#0071e9"
                name="plus"
                size={18}
              />
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "display": "flex",
            "flexDirection": "row",
            "justifyContent": "space-around",
            "paddingVertical": 8,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "height": 45,
              },
              Object {
                "paddingHorizontal": 8,
                "width": "50%",
              },
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              accessibilityState={
                Object {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#ffffffff",
                  "borderColor": "#0071e9",
                  "borderRadius": 5,
                  "borderWidth": 1,
                  "flex": 1,
                  "justifyContent": "center",
                  "opacity": 1,
                }
              }
              testID="cancelButton"
            >
              <Text
                style={
                  Object {
                    "color": "#0071e9",
                    "fontFamily": "Roboto-Medium",
                    "fontSize": 16,
                    "fontWeight": "normal",
                    "textAlign": undefined,
                  }
                }
              >
                [missing "en.GENERICS.CANCEL" translation]
              </Text>
            </View>
          </View>
        </View>
        <View
          style={
            Array [
              Object {
                "height": 45,
              },
              Object {
                "paddingHorizontal": 8,
                "width": "50%",
              },
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              accessibilityState={
                Object {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#0071e9",
                  "borderRadius": 5,
                  "elevation": 1,
                  "flex": 1,
                  "justifyContent": "center",
                  "opacity": 1,
                }
              }
              testID="confirmButton"
            >
              <Text
                style={
                  Object {
                    "color": "#ffffffff",
                    "fontFamily": "Roboto-Medium",
                    "fontSize": 16,
                    "fontWeight": "normal",
                    "textAlign": undefined,
                  }
                }
              >
                [missing "en.APPROVAL.CONFIRM" translation]
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</Modal>
`;

exports[`ReserveAdjustmentScreen renders loader for Location List while getting reserve locations for the item 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "flexDirection": "column",
      "justifyContent": "space-between",
    }
  }
>
  <CustomModalComponent
    animationType="none"
    isVisible={false}
    modalType="Form"
    onClose={[Function]}
  >
    <PalletQtyUpdate
      handleClose={[Function]}
      handleSubmit={[Function]}
      palletId={0}
      qty={0}
      showCalculator={false}
    />
  </CustomModalComponent>
  <View
    style={
      Object {
        "marginBottom": 6,
      }
    }
  >
    <ItemCard
      OHItemInfo={
        Object {
          "claimsOH": 0,
          "consolidatorOH": 0,
          "flyCloudInTransitOH": 0,
          "flyCloudOH": 0,
          "salesFloorOH": 0,
        }
      }
      countryCode="CN"
      description="Test Item That is Really, Really Long (and has parenthesis)"
      disabled={true}
      itemNumber={1234567890}
      loading={false}
      onClick={[Function]}
      onHandQty={42}
      showItemImage={false}
      showOHItems={true}
    />
  </View>
  <ScrollView
    contentContainerStyle={
      Object {
        "alignItems": "stretch",
        "justifyContent": "center",
        "marginBottom": 6,
      }
    }
    nestedScrollEnabled={true}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
  >
    <LocationListCard
      error={false}
      loading={true}
      locationList={Array []}
      locationType="reserve"
      onRetry={[Function]}
      scanRequired={false}
      showCalculator={false}
    />
  </ScrollView>
  <ItemSeparator />
  <View
    style={
      Object {
        "backgroundColor": "#ffffffff",
      }
    }
  >
    <Button
      backgroundColor="#0071e9"
      disabled={true}
      height={45}
      onPress={[Function]}
      radius={5}
      style={
        Object {
          "marginHorizontal": 15,
          "marginVertical": 10,
        }
      }
      title="[missing \\"en.GENERICS.CONTINUE\\" translation]"
      titleColor="#ffffffff"
      titleFontSize={16}
      titleFontWeight="normal"
      type={1}
      width={-1}
    />
  </View>
</View>
`;

exports[`ReserveAdjustmentScreen renders the details for a item with non-null status 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "flexDirection": "column",
      "justifyContent": "space-between",
    }
  }
>
  <CustomModalComponent
    animationType="none"
    isVisible={false}
    modalType="Form"
    onClose={[Function]}
  >
    <PalletQtyUpdate
      handleClose={[Function]}
      handleSubmit={[Function]}
      palletId={0}
      qty={0}
      showCalculator={false}
    />
  </CustomModalComponent>
  <View
    style={
      Object {
        "marginBottom": 6,
      }
    }
  >
    <ItemCard
      OHItemInfo={
        Object {
          "claimsOH": 0,
          "consolidatorOH": 0,
          "flyCloudInTransitOH": 0,
          "flyCloudOH": 0,
          "salesFloorOH": 0,
        }
      }
      countryCode="CN"
      description="Test Item That is Really, Really Long (and has parenthesis)"
      disabled={true}
      itemNumber={1234567890}
      loading={false}
      onClick={[Function]}
      onHandQty={42}
      showItemImage={false}
      showOHItems={true}
    />
  </View>
  <ScrollView
    contentContainerStyle={
      Object {
        "alignItems": "stretch",
        "justifyContent": "center",
        "marginBottom": 6,
      }
    }
    nestedScrollEnabled={true}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
  >
    <LocationListCard
      error={false}
      loading={false}
      locationList={Array []}
      locationType="reserve"
      onRetry={[Function]}
      scanRequired={false}
      showCalculator={false}
    />
  </ScrollView>
  <ItemSeparator />
  <View
    style={
      Object {
        "backgroundColor": "#ffffffff",
      }
    }
  >
    <Button
      backgroundColor="#0071e9"
      disabled={false}
      height={45}
      onPress={[Function]}
      radius={5}
      style={
        Object {
          "marginHorizontal": 15,
          "marginVertical": 10,
        }
      }
      title="[missing \\"en.GENERICS.CONTINUE\\" translation]"
      titleColor="#ffffffff"
      titleFontSize={16}
      titleFontWeight="normal"
      type={1}
      width={-1}
    />
  </View>
</View>
`;
