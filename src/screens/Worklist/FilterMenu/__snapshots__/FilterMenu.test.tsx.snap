// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterMenu Component Renders MenuCard with the dropdown icon Closed 1`] = `
Array [
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text>
      Menu Card Title
    </Text>
    <Text
      style={
        Object {
          "color": "#9e9e9e",
          "fontSize": 12,
        }
      }
    >
      Sub Text Closed
    </Text>
  </View>,
  <View
    style={
      Object {
        "flex": 0.1,
      }
    }
  >
    <Icon
      color="#616161"
      name="keyboard-arrow-down"
      size={25}
    />
  </View>,
]
`;

exports[`FilterMenu Component Renders MenuCard with the dropdown icon Open 1`] = `
Array [
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text>
      Menu Card Title
    </Text>
    <Text
      style={
        Object {
          "color": "#9e9e9e",
          "fontSize": 12,
        }
      }
    >
      Sub Text Opened
    </Text>
  </View>,
  <View
    style={
      Object {
        "flex": 0.1,
      }
    }
  >
    <Icon
      color="#616161"
      name="keyboard-arrow-up"
      size={25}
    />
  </View>,
]
`;

exports[`FilterMenu Component ShallowRender FilterMenu 1`] = `
<Context.Provider
  value={
    Object {
      "store": Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Object {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "onStateChange": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <FilterMenuComponent
    areaOpen={false}
    categoryOpen={false}
    dispatch={[MockFunction]}
    exceptionOpen={false}
    filterCategories={Array []}
    filterExceptions={Array []}
    workListAPI={
      Object {
        "error": null,
        "isWaiting": false,
        "result": null,
        "value": null,
      }
    }
  />
</Context.Provider>
`;

exports[`FilterMenu Component Test renders the RenderAreaCard function and calls dispatch 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "borderBottomColor": "#e0e0e0",
      "borderBottomWidth": 1,
      "flexDirection": "row",
      "opacity": 1,
      "paddingHorizontal": 10,
      "paddingVertical": 15,
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text>
      [missing "en.WORKLIST.AREA" translation]
    </Text>
    <Text
      style={
        Object {
          "color": "#9e9e9e",
          "fontSize": 12,
        }
      }
    >
      [missing "en.WORKLIST.ALL" translation]
    </Text>
  </View>
  <View
    style={
      Object {
        "flex": 0.1,
      }
    }
  >
    <Icon
      color="#616161"
      name="keyboard-arrow-down"
      size={25}
    />
  </View>
</View>
`;

exports[`FilterMenu Component Test renders the filter menu component and calls onPress Function 1`] = `
<View
  style={
    Object {
      "alignItems": "flex-start",
      "backgroundColor": "#ffffffff",
      "flex": 1,
      "justifyContent": "flex-start",
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#0071e9",
        "flexDirection": "row",
        "height": 60,
        "justifyContent": "flex-start",
        "width": "100%",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#ffffffff",
          "flex": 1,
          "marginLeft": 15,
        }
      }
    >
      [missing "en.WORKLIST.REFINE" translation]
    </Text>
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 0.5,
          "marginRight": 15,
          "opacity": 1,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#ffffffff",
            "textAlign": "right",
          }
        }
      >
        [missing "en.WORKLIST.CLEAR" translation]
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#e0e0e0",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "opacity": 1,
        "paddingHorizontal": 10,
        "paddingVertical": 15,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        [missing "en.WORKLIST.AREA" translation]
      </Text>
      <Text
        style={
          Object {
            "color": "#9e9e9e",
            "fontSize": 12,
          }
        }
      >
        [missing "en.WORKLIST.ALL" translation]
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 0.1,
        }
      }
    >
      <Icon
        color="#616161"
        name="keyboard-arrow-down"
        size={25}
      />
    </View>
  </View>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#e0e0e0",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "opacity": 1,
        "paddingHorizontal": 10,
        "paddingVertical": 15,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        [missing "en.WORKLIST.CATEGORY" translation]
      </Text>
      <Text
        style={
          Object {
            "color": "#9e9e9e",
            "fontSize": 12,
          }
        }
      >
        [missing "en.WORKLIST.ALL" translation]
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 0.1,
        }
      }
    >
      <Icon
        color="#616161"
        name="keyboard-arrow-down"
        size={25}
      />
    </View>
  </View>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#e0e0e0",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "opacity": 1,
        "paddingHorizontal": 10,
        "paddingVertical": 15,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        [missing "en.WORKLIST.EXCEPTION_TYPE" translation]
      </Text>
      <Text
        style={
          Object {
            "color": "#9e9e9e",
            "fontSize": 12,
          }
        }
      >
        [missing "en.WORKLIST.ALL" translation]
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 0.1,
        }
      }
    >
      <Icon
        color="#616161"
        name="keyboard-arrow-down"
        size={25}
      />
    </View>
  </View>
</View>
`;

exports[`FilterMenu Component Test renders the renderCategoryCollapsibleCard and filteredCategories FlatList  1`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#e0e0e0",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "opacity": 1,
        "paddingHorizontal": 10,
        "paddingVertical": 15,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        [missing "en.WORKLIST.CATEGORY" translation]
      </Text>
      <Text
        style={
          Object {
            "color": "#9e9e9e",
            "fontSize": 12,
          }
        }
      >
        3 - OFFICE SUPPLIES
7 - TOYS
8 - PETS
10 - AUTOMOTIVES
7 - TOYS
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 0.1,
        }
      }
    >
      <Icon
        color="#616161"
        name="keyboard-arrow-up"
        size={25}
      />
    </View>
  </View>,
  <RCTScrollView
    data={
      Array [
        Object {
          "catgName": "WINE",
          "catgNbr": 19,
          "selected": false,
        },
        Object {
          "catgName": "PHARMACY RX",
          "catgNbr": 87,
          "selected": false,
        },
        Object {
          "catgName": "FRESH BAKERY",
          "catgNbr": 88,
          "selected": false,
        },
        Object {
          "catgName": "FOODSERVICE",
          "catgNbr": 93,
          "selected": false,
        },
        Object {
          "catgName": "ELECTRONICS",
          "catgNbr": 99,
          "selected": false,
        },
        Object {
          "catgName": "ELECTRONICS",
          "catgNbr": 199,
          "selected": false,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "flex": 1,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            19 - WINE 
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            87 - PHARMACY RX 
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            88 - FRESH BAKERY 
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            93 - FOODSERVICE 
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            99 - ELECTRONICS 
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="category button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            199 - ELECTRONICS 
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>,
]
`;

exports[`FilterMenu Component Test renders the renderExceptionTypeCard and ExceptionMap FlatList 1`] = `
Array [
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#e0e0e0",
        "borderBottomWidth": 1,
        "flexDirection": "row",
        "opacity": 1,
        "paddingHorizontal": 10,
        "paddingVertical": 15,
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        [missing "en.WORKLIST.EXCEPTION_TYPE" translation]
      </Text>
      <Text
        style={
          Object {
            "color": "#9e9e9e",
            "fontSize": 12,
          }
        }
      >
        [missing "en.EXCEPTION.NSFL" translation]
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 0.1,
        }
      }
    >
      <Icon
        color="#616161"
        name="keyboard-arrow-up"
        size={25}
      />
    </View>
  </View>,
  <RCTScrollView
    data={
      Array [
        Object {
          "display": "[missing \\"en.EXCEPTION.NIL_PICK\\" translation]",
          "selected": false,
          "value": "NP",
        },
        Object {
          "display": "[missing \\"en.EXCEPTION.PRICE_OVERRIDE\\" translation]",
          "selected": false,
          "value": "PO",
        },
        Object {
          "display": "[missing \\"en.EXCEPTION.NO_SALES\\" translation]",
          "selected": false,
          "value": "NS",
        },
        Object {
          "display": "[missing \\"en.EXCEPTION.NEGATIVE_ON_HANDS\\" translation]",
          "selected": false,
          "value": "NO",
        },
        Object {
          "display": "[missing \\"en.EXCEPTION.CANCELLED\\" translation]",
          "selected": false,
          "value": "C",
        },
        Object {
          "display": "[missing \\"en.EXCEPTION.NSFL\\" translation]",
          "selected": true,
          "value": "NSFL",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "flex": 1,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.NIL_PICK" translation]
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.PRICE_OVERRIDE" translation]
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.NO_SALES" translation]
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.NEGATIVE_ON_HANDS" translation]
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-blank-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.CANCELLED" translation]
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "flex-start",
              "opacity": 1,
            }
          }
          testID="exception button"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "width": "10%",
              }
            }
          >
            <Icon
              color="#0071e9"
              name="checkbox-marked-circle-outline"
              size={15}
            />
          </View>
          <Text
            numberOfLines={2}
            style={
              Object {
                "width": "90%",
              }
            }
          >
            [missing "en.EXCEPTION.NSFL" translation]
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>,
]
`;

exports[`FilterMenu Component Test the renderCategoryCollapsibleCard and calls dispatch() 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "borderBottomColor": "#e0e0e0",
      "borderBottomWidth": 1,
      "flexDirection": "row",
      "opacity": 1,
      "paddingHorizontal": 10,
      "paddingVertical": 15,
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text>
      [missing "en.WORKLIST.CATEGORY" translation]
    </Text>
    <Text
      style={
        Object {
          "color": "#9e9e9e",
          "fontSize": 12,
        }
      }
    >
      3 - OFFICE SUPPLIES
7 - TOYS
8 - PETS
10 - AUTOMOTIVES
7 - TOYS
    </Text>
  </View>
  <View
    style={
      Object {
        "flex": 0.1,
      }
    }
  >
    <Icon
      color="#616161"
      name="keyboard-arrow-down"
      size={25}
    />
  </View>
</View>
`;

exports[`FilterMenu Component Test the renderExceptionFilterCard component with an item selected 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "height": 40,
      "justifyContent": "flex-start",
      "opacity": 1,
    }
  }
  testID="exception button"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "width": "10%",
      }
    }
  >
    <Icon
      color="#0071e9"
      name="checkbox-marked-circle-outline"
      size={15}
    />
  </View>
  <Text
    numberOfLines={2}
    style={
      Object {
        "width": "90%",
      }
    }
  >
    Nil Pick
  </Text>
</View>
`;

exports[`FilterMenu Component Test the renderExceptionFilterCard component without an item selected 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "height": 40,
      "justifyContent": "flex-start",
      "opacity": 1,
    }
  }
  testID="exception button"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "width": "10%",
      }
    }
  >
    <Icon
      color="#0071e9"
      name="checkbox-blank-circle-outline"
      size={15}
    />
  </View>
  <Text
    numberOfLines={2}
    style={
      Object {
        "width": "90%",
      }
    }
  >
    Price Override
  </Text>
</View>
`;

exports[`FilterMenu Component Test the renderExceptionTypeCard and calls dispatch() 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "borderBottomColor": "#e0e0e0",
      "borderBottomWidth": 1,
      "flexDirection": "row",
      "opacity": 1,
      "paddingHorizontal": 10,
      "paddingVertical": 15,
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text>
      [missing "en.WORKLIST.EXCEPTION_TYPE" translation]
    </Text>
    <Text
      style={
        Object {
          "color": "#9e9e9e",
          "fontSize": 12,
        }
      }
    >
      [missing "en.EXCEPTION.NSFL" translation]
    </Text>
  </View>
  <View
    style={
      Object {
        "flex": 0.1,
      }
    }
  >
    <Icon
      color="#616161"
      name="keyboard-arrow-down"
      size={25}
    />
  </View>
</View>
`;

exports[`FilterMenu Component Tests renderCategoryFilterCard component and calls onItemPress with an item selected 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "height": 40,
      "justifyContent": "flex-start",
      "opacity": 1,
    }
  }
  testID="category button"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "width": "10%",
      }
    }
  >
    <Icon
      color="#0071e9"
      name="checkbox-marked-outline"
      size={15}
    />
  </View>
  <Text
    numberOfLines={2}
    style={
      Object {
        "width": "90%",
      }
    }
  >
    12 - WINE 
  </Text>
</View>
`;

exports[`FilterMenu Component Tests renderCategoryFilterCard component and calls onItemPress without an item selected 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "height": 40,
      "justifyContent": "flex-start",
      "opacity": 1,
    }
  }
  testID="category button"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "width": "10%",
      }
    }
  >
    <Icon
      color="#0071e9"
      name="checkbox-blank-outline"
      size={15}
    />
  </View>
  <Text
    numberOfLines={2}
    style={
      Object {
        "width": "90%",
      }
    }
  >
    7 - TOYS 
  </Text>
</View>
`;
