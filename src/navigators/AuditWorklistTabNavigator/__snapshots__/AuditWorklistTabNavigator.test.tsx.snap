// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuditWorklistTab Navigator Renders AuditWorkListTab component wrapper 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <Context.Provider
      value={
        {
          "addListener": [MockFunction],
          "isFocused": [Function],
        }
      }
    >
      <AuditWorklistTabs />
    </Context.Provider>
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`AuditWorklistTab Navigator Renders the Audit WorkList Tab Navigator component without in progress tab 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabNavigator
    auditWorklistItems={[]}
    dispatch={[MockFunction]}
    enableAuditsInProgress={false}
    isMounted={
      {
        "current": false,
      }
    }
    navigation={
      {
        "addListener": [MockFunction],
        "canGoBack": [MockFunction],
        "dispatch": [MockFunction],
        "getId": [MockFunction],
        "getParent": [MockFunction],
        "getState": [MockFunction],
        "goBack": [MockFunction],
        "isFocused": [MockFunction],
        "navigate": [MockFunction],
        "removeListener": [MockFunction],
        "reset": [MockFunction],
        "setOptions": [MockFunction],
        "setParams": [MockFunction],
      }
    }
    route={
      {
        "key": "",
        "name": "AuditWorklistTabs",
      }
    }
    scannedEvent={
      {
        "type": null,
        "value": null,
      }
    }
    trackEventCall={[MockFunction]}
    useCallbackHook={[MockFunction]}
    useEffectHook={[MockFunction]}
    useFocusEffectHook={[MockFunction]}
    validateSessionCall={[MockFunction]}
  />
</Context.Provider>
`;

exports[`AuditWorklistTab Navigator renders the Audit worklist tab navigator component with in progress tab 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "identityFunctionCheck": "once",
      "stabilityCheck": "once",
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <AuditWorklistTabNavigator
    auditWorklistItems={[]}
    dispatch={[MockFunction]}
    enableAuditsInProgress={true}
    isMounted={
      {
        "current": false,
      }
    }
    navigation={
      {
        "addListener": [MockFunction],
        "canGoBack": [MockFunction],
        "dispatch": [MockFunction],
        "getId": [MockFunction],
        "getParent": [MockFunction],
        "getState": [MockFunction],
        "goBack": [MockFunction],
        "isFocused": [MockFunction],
        "navigate": [MockFunction],
        "removeListener": [MockFunction],
        "reset": [MockFunction],
        "setOptions": [MockFunction],
        "setParams": [MockFunction],
      }
    }
    route={
      {
        "key": "",
        "name": "AuditWorklistTabs",
      }
    }
    scannedEvent={
      {
        "type": null,
        "value": null,
      }
    }
    trackEventCall={[MockFunction]}
    useCallbackHook={[MockFunction]}
    useEffectHook={[MockFunction]}
    useFocusEffectHook={[MockFunction]}
    validateSessionCall={[MockFunction]}
  />
</Context.Provider>
`;
